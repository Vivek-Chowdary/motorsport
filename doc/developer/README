COMPILATION ISSUES
==================
If you want to compile under windows, be sure to read "windowsGuide.txt" in this same directory.


ENGINES
=======
Every directory is reserved for one engine. Currently there's 4 engines:

Data --> stores and loads data from/to memory to/from harddisk
Graphics --> draws the world data on screen
Input --> takes user input and transforms it into world data or system data
Log --> creates log files for every engine and for the main program
etc...

DATA IDF
========
The data IDF is stored in the world.hpp and sytem.hpp files. They have in formation about the world data and the system data.

World data --> stores all the information related to the simulation; to the virtual world (a simulated real world), from the point of view of a real life driver. 
System data --> stores the rest of information

For example:
Do a r/l driver know about cars? Yes -> world data
Do a r/l driver know about screen color depth? No -> system data
Do a r/l driver know about track surfaces? Yes -> world data
Do a r/l driver know about joystick calibration? No -> system data
Do a r/l driver know about saving a replay? No -> system data
Do a r/l driver know about weather? Yes -> world data
Well you get the idea...

-The physics engine only needs to know about world data: i.e. it takes current car position and applies the gravity force
-The input engine needs to know about both world and system data: i.e. modify the car's pedal position (world), and know about the controller configuration (system).
-The graphics engine needs to know about both world and system data: i.e. display the cars on screen (world), display chat text on screen in multiplayer (system), display the FPS in a corner of the screen (system), etc...
-The log engine need nothing: it's given a text, and the logengine takes it and writes it to the harddisk.
-The data engine needs to know about both: i.e. it's the data engine who loads cars/tracks to RAM, and it's the data engine who reads the screen resolution config from a file,
There's more engines (net,ai,replay,sound...) to come, but we will talk about them when we need.



CODE FORMAT
===========
You can format the code by using:
indent -bad -bap -bc -bl -bli0 -bls -bs -cbi0 -cdw -cli0 -cs -d0 -di0 -hnl -i4 -l80 -lc80 -lp -nce -npsl -nut -pcs -pi4 -ppi4 -prs -saf -sai -saw -sbi0 -sob -ss -ts4 
